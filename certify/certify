#!/bin/bash

strDate=$(date +%Y-%m-%d)

strCertifyBaseFolder=/etc/certify

strB64HTMLPublicPage=PCFET0NUWVBFIGh0bWw+CjxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPHRpdGxlPm5naW54c2VjdXJlcHJveHkgRGVmYXVsdCBQYWdlPC90aXRsZT4KICAgIDwvaGVhZD4KCiAgICA8Ym9keT4KICAgICAgICA8cD5Db25ncmF0dWxhdGlvbnMhIFlvdXIgcGFnZSBpcyB1cCB0byBmb3IgU1NMIGNvbm5lY3Rpb24gd2l0aCBhIFIzIENlcnRpZmljYXRlLjwvcD4KICAgICAgICA8cD5QbGVhc2UgZmlsbCBvdXQgeW91ciB3ZWJyb290IGZvbGRlciBvciBzZXR1cCBhIHByb3h5IHBhc3MgaW4geW91ciBjb25maWd1cmF0aW9uIGZpbGVzLjwvcD4KICAgICAgICA8YnIgLz4KICAgICAgICA8cD5OZXcgQ2VydGlmaWNhdGU6PC9wPgogICAgICAgIDxsaT5kb2NrZXIgZXhlYyAtaXQgbmdpbnhzZWN1cmVwcm94eSBjZXJ0aWZ5IC0tbmV3Y2VydCBkb21haW4uY29tIG1haWxAZG9tYWluLmNvbTwvbGk+CiAgICA8L2JvZHk+Cgo8L2h0bWw+
strB64defaultNginxConfig80=c2VydmVyIHsNCiAgICBsaXN0ZW4gODA7DQogICAgbGlzdGVuIFs6Ol06ODA7DQogICAgc2VydmVyX25hbWUgXzsNCiAgICANCiAgICBsb2NhdGlvbiB+IC8ud2VsbC1rbm93bi9hY21lLWNoYWxsZW5nZSB7DQogICAgICAgIGFsbG93IGFsbDsgDQogICAgICAgIHJvb3QgL3Zhci93d3cvY2VydGJvdDsNCiAgICB9DQoNCiAgICBsb2NhdGlvbiB+IC8gew0KICAgICAgICBhbGxvdyBhbGw7IA0KICAgICAgICByZXR1cm4gMzAxIGh0dHBzOi8vZ29vZ2xlLmNvbTsNCiAgICB9DQoNCn0=
strB64defaultCertifyNginxConfig=c2VydmVyIHsKICAgIGxpc3RlbiA4MDsKICAgIGxpc3RlbiBbOjpdOjgwOwogICAgc2VydmVyX25hbWUgZXhhbXBsZS5vcmc7CiAgICAKICAgIGxvY2F0aW9uIH4gLy53ZWxsLWtub3duL2FjbWUtY2hhbGxlbmdlIHsKICAgICAgICBhbGxvdyBhbGw7IAogICAgICAgIHJvb3QgL3Zhci93d3cvY2VydGJvdC9leGFtcGxlLm9yZzsKICAgIH0KICAgIAogICAgbG9jYXRpb24gfiAvIHsKICAgICAgICBhbGxvdyBhbGw7IAogICAgICAgIHJldHVybiAzMDEgaHR0cHM6Ly8kaG9zdCRyZXF1ZXN0X3VyaTsKICAgIH0KfQoKc2VydmVyIHsKICAgICAgICAgIGxpc3RlbiBbOjpdOjQ0MyBzc2wgaHR0cDI7CiAgICAgICAgICBsaXN0ZW4gNDQzIHNzbCBodHRwMjsKCiAgICAgICAgICBzZXJ2ZXJfbmFtZSAgICAgICAgICAgICAgICAgIGV4YW1wbGUub3JnOwoKICAgICAgICAgIGd6aXAgICAgICAgICAgICAgICAgICAgICAgICAgb247CiAgICAgICAgICBnemlwX2NvbXBfbGV2ZWwgICAgICAgICAgICAgIDI7CiAgICAgICAgICBnemlwX21pbl9sZW5ndGggICAgICAgICAgICAgIDEwMjQ7CiAgICAgICAgICBnemlwX3ZhcnkgICAgICAgICAgICAgICAgICAgIG9uOwogICAgICAgICAgZ3ppcF9wcm94aWVkICAgICAgICAgICAgICAgICBleHBpcmVkIG5vLWNhY2hlIG5vLXN0b3JlIHByaXZhdGUgYXV0aDsKICAgICAgICAgIGd6aXBfdHlwZXMgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb24veC1qYXZhc2NyaXB0IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQgYXBwbGljYXRpb24veG1sIGFwcGxpY2F0aW9uL2pzb24gdGV4dC94bWwgdGV4dC9jc3MgdGV4dCQKICAgICAgICAgIGNsaWVudF9ib2R5X3RpbWVvdXQgICAgICAgICAgMTI7CiAgICAgICAgICBjbGllbnRfaGVhZGVyX3RpbWVvdXQgICAgICAgIDEyOwogICAgICAgICAgcmVzZXRfdGltZWRvdXRfY29ubmVjdGlvbiAgICBvbjsKICAgICAgICAgIHByb3h5X2Nvbm5lY3RfdGltZW91dCAgICAgICAgNjAwOwogICAgICAgICAgcHJveHlfc2VuZF90aW1lb3V0ICAgICAgICAgICA2MDA7CiAgICAgICAgICBwcm94eV9yZWFkX3RpbWVvdXQgICAgICAgICAgIDYwMDsKICAgICAgICAgIHNlbmRfdGltZW91dCAgICAgICAgICAgICAgICAgNjAwOwogICAgICAgICAgc2VydmVyX3Rva2VucyAgICAgICAgICAgICAgICBvZmY7CiAgICAgICAgICBjbGllbnRfbWF4X2JvZHlfc2l6ZSAgICAgICAgIDUwbTsKCiAgICAgICAgICBleHBpcmVzICAgICAgICAgICAgICAgICAgICAgIDF5OwogICAgICAgICAgYWNjZXNzX2xvZyAgICAgICAgICAgICAgICAgICBvZmY7CiAgICAgICAgICBsb2dfbm90X2ZvdW5kICAgICAgICAgICAgICAgIG9mZjsKICAgICAgICAgIAogICAgICAgICAgc3NsX2NlcnRpZmljYXRlICAgICAgICAgICAgIC9ldGMvbGV0c2VuY3J5cHQvbGl2ZS9leGFtcGxlLm9yZy9mdWxsY2hhaW4ucGVtOwogICAgICAgICAgc3NsX2NlcnRpZmljYXRlX2tleSAgICAgICAgIC9ldGMvbGV0c2VuY3J5cHQvbGl2ZS9leGFtcGxlLm9yZy9wcml2a2V5LnBlbTsKCiAgICAgICAgICBsb2NhdGlvbiAvIHsKCiAgICAgICAgICAgIAogICAgICAgICAgICBwcm94eV9odHRwX3ZlcnNpb24gICAgICAgICAgMS4xOwogICAgICAgICAgICBwcm94eV9zZXRfaGVhZGVyICAgICAgICAgICAgWC1Gb3J3YXJkZWQtSG9zdCAkaG9zdDsKICAgICAgICAgICAgcHJveHlfc2V0X2hlYWRlciAgICAgICAgICAgIFgtRm9yd2FyZGVkLVNlcnZlciAkaG9zdDsKICAgICAgICAgICAgcHJveHlfc2V0X2hlYWRlciAgICAgICAgICAgIFgtUmVhbC1JUCAkcmVtb3RlX2FkZHI7CiAgICAgICAgICAgIHByb3h5X3NldF9oZWFkZXIgICAgICAgICAgICBYLUZvcndhcmRlZC1Gb3IgJHByb3h5X2FkZF94X2ZvcndhcmRlZF9mb3I7CiAgICAgICAgICAgIHByb3h5X3NldF9oZWFkZXIgICAgICAgICAgICBYLUZvcndhcmRlZC1Qcm90byAkc2NoZW1lOwogICAgICAgICAgICBwcm94eV9zZXRfaGVhZGVyICAgICAgICAgICAgSG9zdCAkaHR0cF9ob3N0OwogICAgICAgICAgICBwcm94eV9zZXRfaGVhZGVyICAgICAgICAgICAgVXBncmFkZSAkaHR0cF91cGdyYWRlOwogICAgICAgICAgICBwcm94eV9zZXRfaGVhZGVyICAgICAgICAgICAgQ29ubmVjdGlvbiAiVXBncmFkZSI7CiAgICAgICAgICAgIHByb3h5X3Bhc3NfcmVxdWVzdF9oZWFkZXJzICBvbjsKCiAgICAgICAgICAgIHJvb3QgICAgICAgICAgICAgICAgICAgICAgICAvdmFyL3d3dy9leGFtcGxlLm9yZzsKCiAgICAgICAgICAgICMgcHJveHlfcGFzcyAgICAgICAgICAgICAgICAgIGh0dHA6Ly9leGFtcGxlLm9yZzsKCiAgICAgICAgICB9Cn0=

strCertifyConfigFolder=$strCertifyBaseFolder/configs
strCertifyDefaultConfig=$strCertifyConfigFolder/foo.bar.conf
strNginxConfigPath=/etc/nginx/conf.d
strExampleDomainName=example.org

strCertifyDomainFolder=$strCertifyBaseFolder/domains
strCertifyLogFolder=$strCertifyBaseFolder/log
strCertifyLogFinalPath=$strCertifyLogFolder/certify_$strDate.log

strDefaultNginxConfig=/etc/nginx/conf.d/80-default.conf

function Logger() {

    if [ ! -f $strCertifyLogFinalPath ]; then
        touch $strCertifyLogFinalPath
    fi 

    echo -e "$strDate | $1 | $2" >> $strCertifyLogFinalPath

}

function init() {

     if [ ! -d $strCertifyConfigFolder ]; then
        mkdir -p $strCertifyConfigFolder
    fi

    if [ ! -f $strDefaultNginxConfig ]; then
        Logger INFO "Extract 80 Default Nginx Conifguration file"
        echo $strB64defaultNginxConfig80 | base64 --decode > $strDefaultNginxConfig
        chown nginx:nginx $strDefaultNginxConfig
        /etc/init.d/nginx reload
    else
        Logger INFO "Init was already complete ..."
    fi

    if [ ! -f $strCertifyDefaultConfig ]; then
        Logger INFO "Extract the default 80 config file or certify"
        echo $strB64defaultCertifyNginxConfig | base64 --decode > $strCertifyDefaultConfig
    else
        Logger INFO "Init was already complete ..."
    fi
}

function ReloadNginxService() {
    if (/etc/init.d/nginx reload); then
        Logger INFO "Nginx Server reloaded successfully"
    else
        Logger ERROR "Problem with reloading Nginx Server"
    fi

}

function RegisterCertificate() {
    strDomainName=$1
    strMailAddress=$2
    strCertbotWebDir=/var/www/certbot/$strDomainName
    strWebDir=/var/www/$strDomainName

    mkdir -p $strCertbotWebDir
    mkdir -p $strWebDir
    chown -R nginx:nginx /var/www/

    
    strOriginString=/var/www/certbot
    strNewString=/var/www/certbot/$strDomainName

    sed -i "s#$strOriginString#$strNewString#g" $strDefaultNginxConfig

    /etc/init.d/nginx reload > /dev/null 2>&1

    if (certbot certonly -n --webroot --webroot-path=$strCertbotWebDir -m $strMailAddress --agree-tos -d $strDomainName); then
        sed -i "s#$strNewString#$strOriginString#g" $strDefaultNginxConfig

        /etc/init.d/nginx reload > /dev/null 2>&1

        cp $strCertifyDefaultConfig $strNginxConfigPath/$strDomainName

        sed -i 's/'$strExampleDomainName'/'$strDomainName'/g' $strNginxConfigPath/$strDomainName

        mv $strNginxConfigPath/$strDomainName $strNginxConfigPath/$strDomainName.conf

        echo $strB64HTMLPublicPage | base64 --decode > $strWebDir/index.html
        chown nginx:nginx $strWebDir/index.html

        /etc/init.d/nginx reload > /dev/null 2>&1

        Logger INFO "Certbot was successfull with $strDomainName"
    else
        sed -i "s#$strNewString#$strOriginString#g" $strDefaultNginxConfig
        rm -rf $strCertbotWebDir
        rm -rf /etc/letsencrypt/live/$strDomainName*
        Logger ERROR "Certbot was not successfull with $strDomainName! Please check your logs from letsencrypt!"
        exit 1
    fi
    
}

case "$1" in
        "--newcert" )
        init
        RegisterCertificate $2 $3
        ;;
        "--init" )
        init
        ;;
        "--reload" )
        ReloadNginxService
        ;;
        *) 
        echo "Invalid Option"
        exit 1
        ;;
esac

exit 0